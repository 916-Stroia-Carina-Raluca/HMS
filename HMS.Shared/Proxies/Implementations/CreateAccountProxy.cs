using HMS.Shared.DTOs;
using HMS.Shared.Entities;
using HMS.Shared.Repositories.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Authentication;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace HMS.Shared.Proxies.Implementations
{
    public class CreateAccountProxy : ICreateAccountRepository
    {
        private readonly HttpClient _http_client;
        private readonly string s_base_url = Config._base_api_url;
        private readonly string _token;

        public CreateAccountProxy(HttpClient httpClient, string token)
        {
            this._http_client = httpClient;
            this._token = token;
        }

        private void AddAuthorizationHeader()
        {
            this._http_client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", this._token);
        }

        public async Task<Patient> createAccount(PatientCreateDto patientDto)
        {
            AddAuthorizationHeader();

            HttpResponseMessage response = await this._http_client.GetAsync(this.s_base_url + "user");
            response.EnsureSuccessStatusCode();

            string response_body = await response.Content.ReadAsStringAsync();

            IEnumerable<UserDto> users = JsonSerializer.Deserialize<IEnumerable<UserDto>>(response_body, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter(JsonNamingPolicy.CamelCase) } // without this, the enum values will not match
            });

            bool exists = users.Any(u => u.CNP == patientDto.CNP
                                      || u.Email == patientDto.Email);
            if (exists)
            {
                throw new AuthenticationException("User with the same CNP or email already exists.");
            }

            UserDto userDto = new UserDto
            {
                Id = 0, // Assuming the ID will be generated by the server
                Email = patientDto.Email,
                Password = patientDto.Password,
                Role = Enums.UserRole.Patient,
                Name = patientDto.Name,
                CNP = patientDto.CNP,
                PhoneNumber = patientDto.PhoneNumber,
                CreatedAt = DateTime.UtcNow,
            };

            string json = JsonSerializer.Serialize(userDto, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter(JsonNamingPolicy.CamelCase) } // without this, the enum values will not match
            });
            StringContent content = new StringContent(json, Encoding.UTF8, "application/json");
            HttpResponseMessage createResponse = await this._http_client.PostAsync(this.s_base_url + "user", content);
            createResponse.EnsureSuccessStatusCode();

            string jsonResponse = await response.Content.ReadAsStringAsync();
            UserDto responseUserDto = JsonSerializer.Deserialize<UserDto>(jsonResponse, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter(JsonNamingPolicy.CamelCase) }
            });

            Patient patient = new Patient
            {
                Id = responseUserDto.Id,
                BloodType = Enum.Parse<HMS.Shared.Enums.BloodType>(patientDto.BloodType),
                EmergencyContact = patientDto.EmergencyContact,
                Allergies = patientDto.Allergies,
                Weight = patientDto.Weight,
                Height = patientDto.Height,
                BirthDate = patientDto.BirthDate,
                Address = patientDto.Address,
            };
            return patient;
        }
    }
}
